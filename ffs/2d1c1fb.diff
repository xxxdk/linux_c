From 2d1c1fb807af59f40a0474768a0ef954efd65fe9 Mon Sep 17 00:00:00 2001
From: Andrzej Pietrasiewicz <andrzej.p@samsung.com>
Date: Fri, 13 Jan 2012 15:13:46 +0100
Subject: [PATCH] FunctionFS: initial implementation

This is the second version of a patch which demonstrates the possibility
of using adbd (Android Debug Bridge daemon) with a generic FunctionFS gadget
instead of a custom adb usb gadget in the Linux kernel. It contains changes
introduced after Benoit's review - thank you Benoit.

The patch adds a replacement usb access layer to adbd: it adds a new layer as
a copy of an existing usb_linux_client.c and introduces
FunctionFS support proper on top of the copied layer. The former usb access
method is still available, the method is chosen at compilation time by
setting USE_USB_FUNCFS variable to false in adb's Android.mk in the section
dedicated to adbd.

How to use on the target device:

$ insmod g_ffs.ko idVendor=<vendor ID> iSerialNumber=<some string>
$ mount -t functionfs adb /dev/usbgadget/adb -o uid=2000,gid=2000
$ ./adbd

The Linux kernel 3.2 release's drivers/usb/gadget/composite.c contains
module parameter definitions for idVendor and iSerialNumber and was
verified to work. "adb devices" issued on host will list <some string> as
the device name.

In case adbd does not switch its identity to uid=2000,gid=2000, respective
options are not required in the mount command above. It depends on adb
properties. If adbd is run standalone (no more Android stuff), then the
properties are set to their defaults which imply switching uid,gid to
2000,2000.

By default old behaviour is compiled in. This can be changed by setting
USE_USB_FUNCFS to true in Android.mk.

This patch requires a patch to bionic which adds <linux/usb_functionfs.h>
which is an exact copy of the relevant file in the linux kernel.

Signed-off-by: Andrzej Pietrasiewicz <andrzej.p@samsung.com>
Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>

Change-Id: I4b42eb267ffa50fca7a5fba46f388a2f083e8b2d
---

diff --git a/adb/Android.mk b/adb/Android.mk
index 7744d2b..5db644c 100644
--- a/adb/Android.mk
+++ b/adb/Android.mk
@@ -96,6 +96,7 @@
 # =========================================================
 
 BUILD_ADBD := true
+USE_USB_FUNCFS := false
 
 # build adbd for the Linux simulator build
 # so we can use it to test the adb USB gadget driver on x86
@@ -107,6 +108,11 @@
 ifeq ($(BUILD_ADBD),true)
 include $(CLEAR_VARS)
 
+USB_LINUX_CLIENT := usb_linux_client.c
+ifeq ($(USE_USB_FUNCFS),true)
+USB_LINUX_CLIENT := usb_funcfs_linux_client.c
+endif
+
 LOCAL_SRC_FILES := \
 	adb.c \
 	backup_service.c \
@@ -120,12 +126,15 @@
 	jdwp_service.c \
 	framebuffer_service.c \
 	remount_service.c \
-	usb_linux_client.c \
+	$(USB_LINUX_CLIENT) \
 	log_service.c \
 	utils.c
 
 LOCAL_CFLAGS := -O2 -g -DADB_HOST=0 -Wall -Wno-unused-parameter
 LOCAL_CFLAGS += -D_XOPEN_SOURCE -D_GNU_SOURCE
+ifeq ($(USE_USB_FUNCFS),true)
+LOCAL_CFLAGS += -DUSE_USB_FUNCFS=1
+endif
 
 # TODO: This should probably be board specific, whether or not the kernel has
 # the gadget driver; rather than relying on the architecture type.
diff --git a/adb/adb.c b/adb/adb.c
index e35c334..07d219b 100644
--- a/adb/adb.c
+++ b/adb/adb.c
@@ -951,7 +951,7 @@
     if (sscanf(value, "%d", &port) == 1 && port > 0) {
         // listen on TCP port specified by service.adb.tcp.port property
         local_init(port);
-    } else if (access("/dev/android_adb", F_OK) == 0) {
+    } else if (access(USB_ADB_PATH, F_OK) == 0) {
         // listen on USB
         usb_init();
     } else {
diff --git a/adb/adb.h b/adb/adb.h
index ac31f11..b3604cf 100644
--- a/adb/adb.h
+++ b/adb/adb.h
@@ -440,6 +440,14 @@
 
 #define CHUNK_SIZE (64*1024)
 
+#if !ADB_HOST
+#ifdef USE_USB_FUNCFS
+#define USB_ADB_PATH "/dev/usbgadget/adb"
+#else
+#define USB_ADB_PATH "/dev/android_adb"
+#endif
+#endif
+
 int sendfailmsg(int fd, const char *reason);
 int handle_host_request(char *service, transport_type ttype, char* serial, int reply_fd, asocket *s);
 
diff --git a/adb/usb_funcfs_linux_client.c b/adb/usb_funcfs_linux_client.c
new file mode 100644
index 0000000..b4f2dfe
--- /dev/null
+++ b/adb/usb_funcfs_linux_client.c
@@ -0,0 +1,354 @@
+/*
+ * Copyright (C) 2007 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ * Copyright (C) 2012 Samsung Electronics Co Ltd.
+ * Andrzej Pietrasiewicz <andrzej.p@samsung.com>
+ *
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <string.h>
+
+#include <sys/ioctl.h>
+#include <sys/types.h>
+#include <dirent.h>
+#include <errno.h>
+
+#include <linux/usb_ch9.h>
+#include <linux/usb_functionfs.h>
+
+#include "sysdeps.h"
+
+#define   TRACE_TAG  TRACE_USB
+#include "adb.h"
+
+#define MAX_PACKET_SIZE_FS	64
+#define MAX_PACKET_SIZE_HS	512
+
+#define cpu_to_le16(x)  htole16(x)
+#define cpu_to_le32(x)  htole32(x)
+
+static const char ep0_path[] = USB_ADB_PATH"/ep0";
+static const char ep1_path[] = USB_ADB_PATH"/ep1";
+static const char ep2_path[] = USB_ADB_PATH"/ep2";
+
+static const struct {
+    struct usb_functionfs_descs_head header;
+    struct {
+        struct usb_interface_descriptor intf;
+        struct usb_endpoint_descriptor_no_audio source;
+        struct usb_endpoint_descriptor_no_audio sink;
+    } __attribute__((packed)) fs_descs, hs_descs;
+} __attribute__((packed)) descriptors = {
+    .header = {
+        .magic = cpu_to_le32(FUNCTIONFS_DESCRIPTORS_MAGIC),
+        .length = cpu_to_le32(sizeof descriptors),
+        .fs_count = 3,
+        .hs_count = 3,
+},
+    .fs_descs = {
+        .intf = {
+            .bLength = sizeof descriptors.fs_descs.intf,
+            .bDescriptorType = USB_DT_INTERFACE,
+            .bInterfaceNumber = 0,
+            .bNumEndpoints = 2,
+            .bInterfaceClass = ADB_CLASS,
+            .bInterfaceSubClass = ADB_SUBCLASS,
+            .bInterfaceProtocol = ADB_PROTOCOL,
+            .iInterface = 1, /* first string from the provided table */
+        },
+        .source = {
+            .bLength = sizeof descriptors.fs_descs.source,
+            .bDescriptorType = USB_DT_ENDPOINT,
+            .bEndpointAddress = 1 | USB_DIR_OUT,
+            .bmAttributes = USB_ENDPOINT_XFER_BULK,
+            .wMaxPacketSize = MAX_PACKET_SIZE_FS,
+	},
+        .sink = {
+            .bLength = sizeof descriptors.fs_descs.sink,
+            .bDescriptorType = USB_DT_ENDPOINT,
+            .bEndpointAddress = 2 | USB_DIR_IN,
+            .bmAttributes = USB_ENDPOINT_XFER_BULK,
+            .wMaxPacketSize = MAX_PACKET_SIZE_FS,
+        },
+    },
+    .hs_descs = {
+        .intf = {
+            .bLength = sizeof descriptors.hs_descs.intf,
+            .bDescriptorType = USB_DT_INTERFACE,
+            .bInterfaceNumber = 0,
+            .bNumEndpoints = 2,
+            .bInterfaceClass = ADB_CLASS,
+            .bInterfaceSubClass = ADB_SUBCLASS,
+            .bInterfaceProtocol = ADB_PROTOCOL,
+            .iInterface = 1, /* first string from the provided table */
+        },
+        .source = {
+            .bLength = sizeof descriptors.hs_descs.source,
+            .bDescriptorType = USB_DT_ENDPOINT,
+            .bEndpointAddress = 1 | USB_DIR_OUT,
+            .bmAttributes = USB_ENDPOINT_XFER_BULK,
+            .wMaxPacketSize = MAX_PACKET_SIZE_HS,
+        },
+        .sink = {
+            .bLength = sizeof descriptors.hs_descs.sink,
+            .bDescriptorType = USB_DT_ENDPOINT,
+            .bEndpointAddress = 2 | USB_DIR_IN,
+            .bmAttributes = USB_ENDPOINT_XFER_BULK,
+            .wMaxPacketSize = MAX_PACKET_SIZE_HS,
+        },
+    },
+};
+
+#define STR_INTERFACE_ "ADB Interface"
+
+static const struct {
+    struct usb_functionfs_strings_head header;
+    struct {
+        __le16 code;
+        const char str1[sizeof STR_INTERFACE_];
+    } __attribute__((packed)) lang0;
+} __attribute__((packed)) strings = {
+    .header = {
+        .magic = cpu_to_le32(FUNCTIONFS_STRINGS_MAGIC),
+        .length = cpu_to_le32(sizeof strings),
+        .str_count = cpu_to_le32(1),
+        .lang_count = cpu_to_le32(1),
+    },
+    .lang0 = {
+        cpu_to_le16(0x0409), /* en-us */
+        STR_INTERFACE_,
+    },
+};
+
+struct usb_handle
+{
+    const char *EP0_NAME;
+    const char *EP_IN_NAME;
+    const char *EP_OUT_NAME;
+    int control;
+    int bulk_out; /* "out" from the host's perspective => source for adbd */
+    int bulk_in;  /* "in" from the host's perspective => sink for adbd */
+    adb_cond_t notify;
+    adb_mutex_t lock;
+};
+
+static void init_functionfs(struct usb_handle *h)
+{
+    ssize_t ret;
+
+    D("OPENING %s\n", h->EP0_NAME);
+    h->control = adb_open(h->EP0_NAME, O_RDWR);
+    if (h->control < 0) {
+        D("[ %s: cannot open control endpoint ]\n", h->EP0_NAME);
+        h->control = -errno;
+        return;
+    }
+
+    D("[ %s: writing descriptors ]\n", h->EP0_NAME);
+    ret = adb_write(h->control, &descriptors, sizeof descriptors);
+    if (ret < 0) {
+        D("[ %s: write: descriptors ]\n", h->EP0_NAME);
+        h->control = -errno;
+        return;
+    }
+
+    D("[ %s: writing strings ]\n", h->EP0_NAME);
+    ret = adb_write(h->control, &strings, sizeof strings);
+    if(ret < 0) {
+        D("[ %s: write: strings ]\n", h->EP0_NAME);
+        h->control = -errno;
+        return;
+    }
+
+    D("[ %s: opening ]\n", h->EP_OUT_NAME);
+    if ((h->bulk_out = adb_open(h->EP_OUT_NAME, O_RDWR)) < 0) {
+        D("[ %s: cannot open bulk-out endpoint ]\n", h->EP_OUT_NAME);
+        h->bulk_out = -errno;
+        return;
+    }
+	
+    D("[ %s: opening ]\n", h->EP_IN_NAME);
+    if ((h->bulk_in = adb_open(h->EP_IN_NAME, O_RDWR)) < 0) {
+        D("[ %s: cannot open bulk-in endpoint ]\n", h->EP_IN_NAME);
+        h->bulk_in = -errno;
+        return;
+    }
+
+    return;
+}
+
+void usb_cleanup()
+{
+    // nothing to do here
+}
+
+static void *usb_open_thread(void *x)
+{
+    struct usb_handle *usb = (struct usb_handle *)x;
+
+    while (1) {
+        // wait until the USB device needs opening
+        adb_mutex_lock(&usb->lock);
+        while (usb->control != -1)
+            adb_cond_wait(&usb->notify, &usb->lock);
+        adb_mutex_unlock(&usb->lock);
+
+        init_functionfs(usb);
+        D("[ opening device succeeded ]\n");
+
+        D("[ usb_thread - registering device ]\n");
+        register_usb_transport(usb, 0, 1);
+    }
+
+    // never gets here
+    return 0;
+}
+
+static int bulk_write(int bulk_in, const void *buf, size_t length)
+{
+    size_t count = 0;
+    int ret;
+
+    do {
+        ret = adb_write(bulk_in, buf + count, length - count);
+        if (ret < 0) {
+            if (errno != EINTR)
+                return ret;
+            } else
+                count += ret;
+    } while (count < length);
+
+    D("[ bulk_write done fd=%d ]\n", bulk_in);
+    return count;
+}
+
+int usb_write(usb_handle *h, const void *data, int len)
+{
+    int n;
+
+    D("about to write (fd=%d, len=%d)\n", h->bulk_in, len);
+    n = bulk_write(h->bulk_in, data, len);
+    if(n != len) {
+        D("ERROR: fd = %d, n = %d, errno = %d (%s)\n",
+            h->bulk_in, n, errno, strerror(errno));
+        return -1;
+    }
+    D("[ done fd=%d ]\n", h->bulk_in);
+    return 0;
+}
+
+static int bulk_read(int bulk_out, void *buf, size_t length)
+{
+    size_t count = 0;
+    int ret;
+
+    do {
+        ret = adb_read(bulk_out, buf + count, length - count);
+        if (ret < 0) {
+            if (errno != EINTR)
+                return ret;
+            } else
+            count += ret;
+    } while (count < length);
+
+    D("[ bulk_read done fd=%d ]\n", bulk_out);
+    return count;
+}
+
+int usb_read(usb_handle *h, void *data, int len)
+{
+    int n;
+
+    D("about to read (fd=%d, len=%d)\n", h->bulk_out, len);
+    n = bulk_read(h->bulk_out, data, len);
+    if(n != len) {
+        D("ERROR: fd = %d, n = %d, errno = %d (%s)\n",
+            h->bulk_out, n, errno, strerror(errno));
+        return -1;
+    }
+    D("[ done fd=%d ]\n", h->bulk_out);
+    return 0;
+}
+
+static int autoconfig(struct usb_handle *h)
+{
+    struct stat statb;
+
+    if (stat(h->EP0_NAME = ep0_path, &statb) == 0) {
+        h->EP_OUT_NAME = ep1_path;
+        h->EP_IN_NAME = ep2_path;
+    } else {
+        h->EP0_NAME = 0;
+        return -ENODEV;
+    }
+
+    return 0;
+}
+
+void usb_init()
+{
+    usb_handle *h;
+    adb_thread_t tid;
+
+    D("[ usb_init - using FunctionFS ]\n");
+
+    h = calloc(1, sizeof(usb_handle));
+    if (autoconfig(h) < 0) {
+	fatal_errno("[ can't recognize usb FunctionFS bulk device ]\n");
+	free(h);
+        return;
+    }
+
+    h->control = h->bulk_out = h->bulk_out = -1;
+
+    adb_cond_init(&h->notify, 0);
+    adb_mutex_init(&h->lock, 0);
+
+    D("[ usb_init - starting thread ]\n");
+    if(adb_thread_create(&tid, usb_open_thread, h)){
+        fatal_errno("[ cannot create usb thread ]\n");
+    }
+}
+
+void usb_kick(usb_handle *h)
+{
+    int err;
+
+    err = ioctl(h->bulk_in, FUNCTIONFS_CLEAR_HALT);
+    if (err < 0)
+	perror("[ reset source fd ]\n");
+
+    err = ioctl(h->bulk_out, FUNCTIONFS_CLEAR_HALT);
+    if (err < 0)
+	perror("reset sink fd");
+
+    adb_mutex_lock(&h->lock);
+    adb_close(h->control);
+    adb_close(h->bulk_out);
+    adb_close(h->bulk_in);
+    h->control = h->bulk_out = h->bulk_out = -1;
+
+    // notify usb_open_thread that we are disconnected
+    adb_cond_signal(&h->notify);
+    adb_mutex_unlock(&h->lock);
+}
+
+int usb_close(usb_handle *h)
+{
+    return 0;
+}
